* Stateful application: the server knowss that it will get requests from a single user andd can fetch the user history
* Stateless application: the back knows nothing but what is sent at each request, if i want a state of the user, a history of the user i must send it in the request
here comes the jwt, the jwt is a token where i can store some infon not too much or not critical info,i use the jwt to authenticate each request from the front to the back.
The backend is responsible for generating the jwt token and the frontend for storing it, i will store it in the local storage and use it for each following request
* In order to communicate from the frontend to the backend, we can use fetch that returns a promise that returns a response when will be executed(asynchronous)
* React query is based necessarily on 3 concepts:
- Queries
- Mutations
- Query Invalidation
* Queries: A query is a declarative dependency on an asynchronous source of data that is tied to a unique key. A query can be used with any Promise based method (including GET and POST methods) to fetch data from a server. If your method modifies data on the server, we recommend using Mutations instead.
To subscribe to a query in my components or custom hooks, call the "useQuery" hook with at least:
* A unique key for the query
* A function that returns a promise that:
- Resolves the data, or
- Throws an error

import { useQuery } from '@tanstack/react-query'

function App() {
  const info = useQuery({ queryKey: ['todos'], queryFn: fetchTodoList })
}

The unique key you provide is used internally for refetching, caching, and sharing your queries throughout your application.
The query result returned by useQuery contains all of the information about the query that you'll need for templating and any other usage of the data:
The result object contains a few very important states you'll need to be aware of to be productive. A query can only be in one of the following states at any given moment:

isPending or status === 'pending' - The query has no data yet
isError or status === 'error' - The query encountered an error
isSuccess or status === 'success' - The query was successful and data is available
Beyond those primary states, more information is available depending on the state of the query:

error - If the query is in an isError state, the error is available via the error property.
data - If the query is in an isSuccess state, the data is available via the data property.
isFetching - In any state, if the query is fetching at any time (including background refetching) isFetching will be true.

